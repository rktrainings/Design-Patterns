package com.rk.trainings.designpatterns.structural.abstractfactory.pattern;

import com.rk.trainings.designpatterns.structural.abstractfactory.constants.AbstractFactoryConstants;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.Blue;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.Circle;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.Green;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.IColor;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.IShape;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.Rectangle;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.Red;
import com.rk.trainings.designpatterns.structural.abstractfactory.service.Square;

public class ColorFactory extends AbstractFactory {

	@Override
	   public IShape getShape(String shapeType){
	      return null;
	   }
	   
	   @Override
	   IColor getColor(String color) {
	   
	      if(color == null){
	         return null;
	      }		
	      
	      if(color.equalsIgnoreCase(AbstractFactoryConstants.RED)){
	         return new Red();
	         
	      }else if(color.equalsIgnoreCase(AbstractFactoryConstants.GREEN)){
	         return new Green();
	         
	      }else if(color.equalsIgnoreCase(AbstractFactoryConstants.BLUE)){
	         return new Blue();
	      }
	      
	      return null;
	   }

}
